#64-bit Adds (45 points): Write a MIPS assembly program in the MARS simulator that solves the following problem. Ask the user to enter 4 unsigned (positive) 32-bit integers. Read these 4 integers; let's call them A, B, C, D. At the end of your program, registers $t8 and $t9 should contain the 64-bit result of ((A*B) + (C*D)); $t8 should have the most significant 32 bits and $t9 should have the least significant 32 bits. We will not test your code with invalid inputs, so you don't need to clutter your code with checks for invalid inputs.
#Hint: The tricky part here of course is to perform addition on two 64-bit values. Since you can only do 32-bit additions in MARS, you'll somehow have to figure out how to propagate a carry from the 32nd bit to the 33rd bit. When you add two large 32-bit numbers (with addu $t1, $t2, $t3), the result may be a 33-bit number, but MIPS does not give you access to that 33rd bit. So you'll have to explicitly compute that 33rd bit. Note that the 33rd bit is a 1 if at least two of the following three bits are 1: (i) the 32nd bit of the first operand, (ii) the 32nd bit of the second operand, (iii) the carry generated by the sum of the 31 least significant bits.
#this code is contributed by Khushi Shukla    
.data
    a1: .asciiz "Enter first number: "
    b1: .asciiz "Enter second number: "
    c1: .asciiz "Enter third number: "
    d1: .asciiz "Enter fourth number: "
    e1: .asciiz "The answer is:\n"
    f1: .asciiz " "

.text
#li $v0,4
#la $a0,e1
#syscall
    #The function used here is calc that performs the operation and returns the result

    li $v0,4
    la $a0,a1
    syscall

    li $v0,5
    syscall
    add $s0,$v0,$zero

    li $v0,4
    la $a0,b1
    syscall

    li $v0,5
    syscall
    add $s1,$v0,$zero

    li $v0,4
    la $a0,c1
    syscall

    li $v0,5
    syscall
    add $s2,$v0,$zero

    li $v0,4
    la $a0,d1
    syscall

    li $v0,5
    syscall
    add $s3,$v0,$zero

    move $a0, $s0
    move $a1, $s1
    move $a2, $s2
    move $a3, $s3

    #addi $a0, $zero, 4294967295
    #addi $a1, $zero, 4294967295
    #addi $a2, $zero, 4294967295
    #addi $a3, $zero, 4294967295

    jal calc

    move $t0, $v0
    move $t1, $v1

    li $v0,4
    la $a0,e1
    syscall

    li $v0,1
    add $a0, $t0, $zero
    syscall

    li $v0,4
    la $a0,f1
    syscall

    li $v0,1
    add $a0, $t1, $zero
    syscall

    li $v0, 10
    syscall


    calc:
        multu $a0, $a1
        mfhi $t1
        mflo $t0

        multu $a2, $a3
        mfhi $t2
        mflo $t3

        add $t4, $t0, $t3
        sltu $t5, $t4, $t0
        addu $t5, $t5, $t1
        addu $t1, $t5, $t2
        move $t0, $t4
        move $v0, $t0
        move $v1, $t1
        jr $ra


